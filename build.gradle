// build.gradle
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.part2'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.8"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'software.amazon.awssdk:s3:2.20.56'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
	implementation 'org.apache.commons:commons-text:1.12.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.h2database:h2'

	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.10.0'

	// QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

def querydslSrcDir = 'src/main/generated'

clean {
	delete file(querydslSrcDir)
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	// REPORT 단계에서 monew 패키지를 제외
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect { dir ->
					fileTree(dir: dir, exclude: [
							"com/part2/monew/**"    // 파일 시스템 경로 스타일
					])
				})
		)
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			element = 'CLASS'
			enabled = true
			// 검증 단계에서도 monew 패키지를 제외
			excludes = [
					"com.part2.monew.**"    // 패키지명 스타일
			]
			limit {
				counter = 'LINE'
				value   = 'COVEREDRATIO'
				minimum = 0.0           // 0% 이상 통과
			}
		}
	}
}

// build/check 단계에 커버리지 검증 자동 통합
tasks.named('check') {
	dependsOn jacocoTestCoverageVerification
}

// 편의용 커버리지 통합 실행 태스크
task testCoverage {
	group 'verification'
	description 'Runs unit tests with coverage'

	dependsOn test, jacocoTestReport, jacocoTestCoverageVerification

	jacocoTestReport.mustRunAfter(test)
	jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}
