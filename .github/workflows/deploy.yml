name: Deploy to Amazon ECS

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: monew-app
  ECS_CLUSTER: intrepid-eagle-tpti91
  ECS_SERVICE: monew-app-service-tfevdb1n
  ECS_TASK_DEFINITION: monew-app
  CONTAINER_NAME: app

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle


      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew test

      - name: Build Docker image
        run: docker build -t monew-app:latest .

      - name: Set environment variables
        run: |
          echo "ECR_REPOSITORY=public.ecr.aws/s2c8n3e6/monew-app" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Tag Docker image
        run: |
          docker tag monew-app:latest ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag monew-app:latest ${{ env.ECR_REPOSITORY }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition monew-app --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            SPRING_PROFILES_ACTIVE=prod
            HELLO=world

      - name: Print task definition
        run: |
          echo ${{ steps.render-task-def.outputs.task-definition }}
          cat ${{ steps.render-task-def.outputs.task-definition }}

      - name: Set ECS environment variables
        run: |
          echo "ECS_CLUSTER=intrepid-eagle-tpti91" >> $GITHUB_ENV
          echo "ECS_SERVICE=monew-app-service-tfevdb1n" >> $GITHUB_ENV

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].status' --output text)
          
          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Deployment successful! Service is active."
          else
            echo "Deployment may have issues. Service status: $SERVICE_STATUS"
            exit 1
          fi